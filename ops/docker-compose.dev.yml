version: "3.9"

name: eventhub-dev

networks:
  eventhub-net:
    name: eventhub-net

x-postgres-common: &postgres-common
  image: postgres:16
  restart: unless-stopped
  environment:
    POSTGRES_USER: eventhub
    POSTGRES_PASSWORD: eventhub
    POSTGRES_DB: app
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U eventhub -d app || exit 1"]
    interval: 5s
    timeout: 3s
    retries: 10
  networks:
    - eventhub-net

volumes:
  user-db-data:
  event-db-data:
  inventory-db-data:
  order-db-data:
  payment-db-data:
  notification-db-data:
  reporting-db-data:
  zookeeper-data:
  kafka-data:
  keycloak-db-data:
  prometheus-data:
  grafana-data:

services:
  # İki db’nin portunu host’a açıyoruz; geri kalanlar sadece internal kullanılacak
  user-db:
    <<: *postgres-common
    container_name: user-db
    volumes:
      - user-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # host:container
  event-db:
    <<: *postgres-common
    container_name: event-db
    volumes:
      - event-db-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  inventory-db:
    <<: *postgres-common
    container_name: inventory-db
    volumes:
      - inventory-db-data:/var/lib/postgresql/data

  order-db:
    <<: *postgres-common
    container_name: order-db
    volumes:
      - order-db-data:/var/lib/postgresql/data

  payment-db:
    <<: *postgres-common
    container_name: payment-db
    volumes:
      - payment-db-data:/var/lib/postgresql/data

  notification-db:
    <<: *postgres-common
    container_name: notification-db
    volumes:
      - notification-db-data:/var/lib/postgresql/data

  reporting-db:
    <<: *postgres-common
    container_name: reporting-db
    volumes:
      - reporting-db-data:/var/lib/postgresql/data
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - eventhub-net
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    # healthcheck opsiyonel ama faydalı
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc -w 2 localhost 2181 | grep -q Mode"]
      interval: 10s
      timeout: 5s
      retries: 12

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      # İç ağ için kafka:9092, host için localhost:9094
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    networks:
      - eventhub-net
    ports:
      - "9094:9094"   # host -> Kafka (PLAINTEXT_HOST)
    volumes:
      - kafka-data:/bitnami/kafka

  # (Opsiyonel) Kafka UI - Topic’leri görmek için faydalı
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=eventhub
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - eventhub-net
    ports:
      - "8085:8080"    # http://localhost:8085
  keycloak-db:
    image: postgres:16
    container_name: keycloak-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    networks:
      - eventhub-net

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    container_name: keycloak
    restart: unless-stopped
    depends_on:
      keycloak-db:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME: localhost
    command:
      - start-dev
      - --db=postgres
      - --db-url=jdbc:postgresql://keycloak-db:5432/keycloak
      - --db-username=keycloak
      - --db-password=keycloak
    ports:
      - "8080:8080"   # http://localhost:8080
    networks:
      - eventhub-net
  
  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    restart: unless-stopped
    networks: [eventhub-net]
    ports:
      - "9090:9090"    # http://localhost:9090
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"

  grafana:
    image: grafana/grafana:10.4.3
    container_name: grafana
    restart: unless-stopped
    networks: [eventhub-net]
    ports:
      - "3000:3000"    # http://localhost:3000  (admin / admin)
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_DEFAULT_THEME=light
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

  # Opsiyonel: container metriklerini görmek için
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    restart: unless-stopped
    networks: [eventhub-net]
    ports:
      - "8088:8080"   # istersen bakarsın
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
